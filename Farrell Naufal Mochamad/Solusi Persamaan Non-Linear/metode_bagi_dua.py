# -*- coding: utf-8 -*-
"""Metode Bagi Dua.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Up2stmluEy-vNBTaWyTo-rzuhEbTuqzV
"""

from sympy import symbols

# Mendefinisikan simbol-simbol yang diperlukan
x = symbols('x')

# Mendefinisikan fungsi yang ingin diselesaikan
def f(x):
    return x**2 - 4  # Ganti fungsi ini sesuai dengan persamaan yang ingin diselesaikan

# Metode bagi dua
def bisection_method(f, a, b, tol=1e-6, max_iter=100):
    if f(a) * f(b) >= 0:
        print("Metode ini gagal karena f(a) dan f(b) memiliki tanda yang sama")
        return None

    iterasi = 0
    while (b - a) / 2 > tol and iterasi < max_iter:
        c = (a + b) / 2
        if f(c) == 0:
            return c
        elif f(c) * f(a) < 0:
            b = c
        else:
            a = c
        iterasi += 1

    return (a + b) / 2

# Memasukkan batas awal dan batas akhir dari pengguna
a = float(input("Masukkan batas awal: "))
b = float(input("Masukkan batas akhir: "))

# Memanggil metode bagi dua untuk menyelesaikan persamaan non-linear
hasil = bisection_method(f, a, b)
if hasil is not None:
    print(f"Solusi pendekatan dari persamaan adalah x = {hasil}")
else:
    print("Gagal menemukan solusi dalam iterasi yang diberikan atau batas awal yang salah.")